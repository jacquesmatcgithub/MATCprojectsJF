package java112.analyzer;

import java.io.*;
import java.util.*;
import java112.utilities.*;

/**
 * The AnalyzeFile class reads in a file and processes it line by line
 * to ultimately end up with a file containing a list of unique tokens
 * from the input file, and also a summary report giving details of the
 * author of the application, the input file and tokens analyzed.
 *
 * @author Jacques Fourie
 * class AnalyzeFile
 */
public class AnalyzeFile implements PropertiesLoaderInterface {

    private static final int VALID_ARGUMENT_COUNT = 2;
    private String inputFilePath;
    private Properties properties;
    private List<Analyzer> analyzers;

    /**
     * No-argument default Constructor for the AnalyzeFile class.
     */
    public AnalyzeFile() {
    }


    /**
     * The runAnalysis method calls methods to.
     * <ol>
     *     <li>Validate the number arguments passed into the application</li>
     *     <li>Add the Analyzers objects to the analyzers ArrayList</li>
     *     <li>Process the input file containing the tokens to be analyzed</li>
     *     <li>Write the output files generated by each of the analyzers</li>
     * </ol>
     * @param arguments Arguments passed into the application.
     */
    public void runAnalysis(String[] arguments) {
        if (arguments.length != VALID_ARGUMENT_COUNT) {
            System.out.println("Please enter one argument on the command line");
            return;
        }

        inputFilePath = arguments[0];

        properties = loadProperties(arguments[1]);

        addAnalyzers();

        processInputFile();

        writeAllOutputFiles();
    }


    /**
     *  The addAnalyzers method adds each analyzer to the analyzer ArrayList
     */
    public void addAnalyzers() {
        analyzers = new ArrayList();

        analyzers.add(new UniqueTokenAnalyzer(properties));
        analyzers.add(new SummaryReport(properties));
        analyzers.add(new BigWordAnalyzer(properties));
        analyzers.add(new TokenCountAnalyzer(properties));
        analyzers.add(new TokenSizeAnalyzer(properties));
        analyzers.add(new KeywordAnalyzer(properties));
    }

    /**
     * The openInputFile method opens the input file. It also
     * calls a method to then read the entire file.
     */
    public void processInputFile() {
        try (
            BufferedReader inputFile = new BufferedReader(
                new FileReader(inputFilePath));
        ) {

            readInputFile(inputFile);
        } catch (FileNotFoundException fileNotFound) {
            fileNotFound.printStackTrace();
        } catch (IOException inoutOutputException) {
            inoutOutputException.printStackTrace();
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }


    /**
     * The readInputFile method reads the input file and calls a
     * method to parse the input record.
     * @param inputFile File path to the file being read.
     * @throws IOException Signals that an I/O exception of some sort
     * has occurred.
     */
    public void readInputFile(BufferedReader inputFile) throws IOException {
        String tokenString = null;

        while (inputFile.ready()) {
            tokenString = inputFile.readLine();

            parseTokens(tokenString);
        }
    }


    /**
     * The parseTokens method takes a token string and splits it into
     * an array of tokens.
     * @param tokenString A string containing zero or more tokens.
     */
    public void parseTokens(String tokenString) {
        String[] tokens = tokenString.split("\\W");

        for (String token : tokens) {
            if (!token.isEmpty()) {
                addTokenToAnalyzers(token);
            }
        }
    }


    /**
     * The addTokenToAnalyzers method takes a single token and sends it to
     * the two Analyzer objects.
     * @param singleToken Token to be added to the set
     */
    public void addTokenToAnalyzers(String singleToken) {
        for (Analyzer analyzer : analyzers) {
            analyzer.processToken(singleToken);
        }
    }


    /**
     * The writeAllOutputFiles method calls the writeOutputFile method
     * for each of the analyzer objects.
     */
    public void writeAllOutputFiles() {
        for (Analyzer analyzer : analyzers) {
            analyzer.writeOutputFile(inputFilePath);
        }
    }
}

